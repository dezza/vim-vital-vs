let s:expect = themis#helper('expect')
let s:Position = vital#vital#import('VS.LSP.Position')
let s:TextEdit = vital#vital#import('VS.LSP.TextEdit')
let s:TextMark = vital#vital#import('VS.Vim.Buffer.TextMark')

let s:TEXT_MARK_ID = 'test'

let s:mark1 = {
\   'start_pos': [2, 1],
\   'end_pos': [3, 1],
\   'highlight': 'ErrorMsg'
\ }

let s:mark2 = {
\   'start_pos': [3, 1],
\   'end_pos': [4, 1],
\   'highlight': 'ErrorMsg'
\ }

Describe vital#__vital__#VS#Vim#Buffer#TextMark

  Before each
    enew!
    call setline(1, ['___', 'foo', 'bar', 'baz'])
  End

  After each
    bdelete!
  End

  Describe #set

    It should set extmarks
      call s:TextMark.set('%', s:TEXT_MARK_ID, [s:mark1, s:mark2])
    End

  End

  Describe #get

    It should return all extmarks
      call s:TextMark.set('%', s:TEXT_MARK_ID, [s:mark1, s:mark2])
      let l:marks = s:TextMark.get('%', s:TEXT_MARK_ID)
      call s:expect(l:marks).to_equal([s:mark1, s:mark2])
    End

    It should return specific extmarks
      call s:TextMark.set('%', s:TEXT_MARK_ID, [s:mark1, s:mark2])
      let l:marks = s:TextMark.get('%', s:TEXT_MARK_ID, [2, 0])
      call s:expect(l:marks).to_equal([])
      let l:marks = s:TextMark.get('%', s:TEXT_MARK_ID, [2, 1])
      call s:expect(l:marks).to_equal([s:mark1])
      let l:marks = s:TextMark.get('%', s:TEXT_MARK_ID, [3, 1])
      call s:expect(l:marks).to_equal([s:mark1, s:mark2])
      " "let l:marks = s:TextMark.get('%', s:TEXT_MARK_ID, [3, 2])
      " "call s:expect(l:marks).to_equal([s:mark2])
    End

    It should return modified extmarks
      call s:TextMark.set('%', s:TEXT_MARK_ID, [s:mark1, s:mark2])
      let l:marks = s:TextMark.get('%', s:TEXT_MARK_ID)
      call s:expect(l:marks).to_equal([s:mark1, s:mark2])
      call append(0, ['---'])
      let l:marks = s:TextMark.get('%', s:TEXT_MARK_ID)

      let l:expects = deepcopy([s:mark1, s:mark2])
      for l:mark in l:expects
        let l:mark.start_pos[0] += 1
        let l:mark.end_pos[0] += 1
      endfor
      call s:expect(l:marks).to_equal(l:expects)
    End

  End

  Describe #clear

    It should clear extmarks
      call s:TextMark.set('%', s:TEXT_MARK_ID, [s:mark1, s:mark2])
      let l:marks = s:TextMark.get('%', s:TEXT_MARK_ID)
      call s:expect(l:marks).to_equal([s:mark1, s:mark2])
      call s:TextMark.clear('%', s:TEXT_MARK_ID)
      let l:marks = s:TextMark.get('%', s:TEXT_MARK_ID)
      call s:expect(l:marks).to_equal([])
    End

  End

  Describe #realworld

    It should preserve marks with edit
      " Mark of f`o`o
      let l:mark = {
      \   'start_pos': [2, 2],
      \   'end_pos': [2, 3],
      \ }
      call s:TextMark.set('%', s:TEXT_MARK_ID, [l:mark])
      call s:expect(s:TextMark.get('%', s:TEXT_MARK_ID)).to_equal([l:mark])

      " f'o'o -> f''o
      call s:check(s:TextMark.get('%', s:TEXT_MARK_ID), [{
      \   'start': [1, 1],
      \   'end': [1, 2],
      \   'text': ''
      \ }], [{
      \   'start_pos': [2, 2],
      \   'end_pos': [2, 2],
      \ }])

      " f''o -> f'bar'o
      call s:check(s:TextMark.get('%', s:TEXT_MARK_ID), [{
      \   'start': [1, 1],
      \   'end': [1, 1],
      \   'text': 'bar'
      \ }], [{
      \   'start_pos': [2, 2],
      \   'end_pos': [2, 5],
      \ }])

      " f'bar'o -> ''
      call s:check(s:TextMark.get('%', s:TEXT_MARK_ID), [{
      \   'start': [1, 0],
      \   'end': [1, 5],
      \   'text': ''
      \ }], [{
      \   'start_pos': [2, 1],
      \   'end_pos': [2, 1],
      \ }])

      " '' -> ''
      call s:check(s:TextMark.get('%', s:TEXT_MARK_ID), [{
      \   'start': [1, 0],
      \   'end': [1, 0],
      \   'text': ''
      \ }], [{
      \   'start_pos': [2, 1],
      \   'end_pos': [2, 1],
      \ }])

      " '' -> 'b'
      call s:check(s:TextMark.get('%', s:TEXT_MARK_ID), [{
      \   'start': [1, 0],
      \   'end': [1, 0],
      \   'text': 'b'
      \ }], [{
      \   'start_pos': [2, 1],
      \   'end_pos': [2, 2],
      \ }])

      " 'b' -> 'bar' ← It can't pass on nvim_buf_set_extmark. We should wait for nvim_buf_set_text's gravity.
      " "call s:check(s:TextMark.get('%', s:TEXT_MARK_ID), [{
      " "\   'start': [1, 1],
      " "\   'end': [1, 1],
      " "\   'text': 'ar'
      " "\ }], [{
      " "\   'start_pos': [2, 1],
      " "\   'end_pos': [2, 4],
      " "\ }])

      " 'b' -> ''
      call cursor([0, 0])
      call feedkeys('diw', 'nxt')
      call s:expect(s:TextMark.get('%', s:TEXT_MARK_ID)).to_equal([{
      \   'start_pos': [2, 1],
      \   'end_pos': [2, 2],
      \ }])
    End

  End

End

function! s:check(marks, edits, expected_marks) abort
  let l:buffer = getline('^', '$')
  %delete _ | call setline(1, l:buffer)
  call s:TextMark.clear('%', s:TEXT_MARK_ID)
  call s:TextMark.set('%', s:TEXT_MARK_ID, deepcopy(a:marks))
  call s:expect(s:TextMark.get('%', s:TEXT_MARK_ID)).to_equal(a:marks)

  call s:TextEdit.apply('%', map(deepcopy(a:edits), { _, e -> {
  \   'range': {
  \     'start': { 'line': e.start[0], 'character': e.start[1] },
  \     'end': { 'line': e.end[0], 'character': e.end[1] },
  \   },
  \   'newText': e.text,
  \ } }))

  call s:expect(s:TextMark.get('%', s:TEXT_MARK_ID)).to_equal(a:expected_marks)
endfunction

