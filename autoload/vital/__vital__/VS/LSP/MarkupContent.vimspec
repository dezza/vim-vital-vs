let s:expect = themis#helper('expect')
let s:MarkupContent = vital#vital#import('VS.LSP.MarkupContent')

Describe vital#__vital__#VS#LSP#MarkupContent

  Describe #normalize

    It should normalize variable type
      call s:expect(s:MarkupContent.normalize('test')).to_be_string()
      call s:expect(s:MarkupContent.normalize(['test'])).to_be_string()
      call s:expect(s:MarkupContent.normalize({ 'language': 'vim', 'value': 'test' })).to_be_string()
    End

    It should keep one-line if codeblock occurs continuously
      call s:expect(s:MarkupContent.normalize(join([
      \   '```typescript',
      \   'console.log(variable)',
      \   '```',
      \   '',
      \   '```typescript',
      \   'console.log(variable)',
      \   '```',
      \ ], "\n"))).to_equal(join([
      \   '```typescript console.log(variable) ```',
      \   '',
      \   '```typescript console.log(variable) ```',
      \ ], "\n"))
    End

    It should not compact codeblock
      call s:expect(s:MarkupContent.normalize(join([
      \   '```typescript',
      \   'console.log(variable)',
      \   '```',
      \   '',
      \   '```typescript',
      \   'console.log(variable)',
      \   '```',
      \ ], "\r\n"), { 'compact': v:false })).to_equal(join([
      \   '```typescript',
      \   'console.log(variable)',
      \   '```',
      \   '```typescript',
      \   'console.log(variable)',
      \   '```',
      \ ], "\n"))
    End

  End

End

