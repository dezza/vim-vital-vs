let s:expect = themis#helper('expect')
let s:Job = vital#vital#import('System.Job')

Describe vital#__vital__#System#Job

  Describe #start

    It should start process
      let s:job = s:Job.new({
      \   'command': ['sh', globpath(&runtimepath, 'misc/vital-vs/loop.sh')]
      \ })

      let s:count = 0
      call s:job.start()
      call s:job.emitter.on('stdout', { -> execute('let s:count += 1') })
      call s:job.emitter.on('stderr', { data -> themis#log(data) })
      sleep 10m
      call s:expect(s:count).to_be_greater_than(0)
    End

  End

  Describe #stop

    It should stop process
      let s:job = s:Job.new({
      \   'command': ['sh', globpath(&runtimepath, 'misc/vital-vs/loop.sh')]
      \ })

      let s:exited = v:false
      call s:job.start()
      call s:job.emitter.on('stderr', { data -> themis#log(data) })
      call s:job.emitter.on('exit', { -> execute('let s:exited = v:true') })
      call s:job.stop()

      while s:exited
      endwhile
    End

  End

End

