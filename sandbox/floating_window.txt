```typescript
function Deno.inspect(
		value: unknown,
		options?: Deno.InspectOptions | undefined
): string
```
```typescript
function Deno.inspect(
		value: unknown,
		options?: Deno.InspectOptions | undefined
): string
```
Converts the input into a string that has the same format as printed by
`console.log()`.
```ts const obj = {
 a: 10,
 b: "hello",
};
const objAsString = Deno.inspect(obj); // { a: 10, b: "hello" }
console.log(obj);  // prints same value as objAsString, e.g. { a: 10, b: "hello" }  ```
You can also register custom inspect functions, via the `customInspect` Deno
symbol on objects, to control and customize the output.
```ts class A {
 x = 10;
 y = "hello";
 [Deno.customInspect](): string {
   return "x=" + this.x + ", y=" + this.y;
 }
}
const inStringFormat = Deno.inspect(new A()); // "x=10, y=hello"
console.log(inStringFormat);  // prints "x=10, y=hello"  ```
Finally, you can also specify the depth to which it will format.
```ts Deno.inspect({a: {b: {c: {d: 'hello'}}}}, {depth: 2}); // { a: { b: [Object] } }  ```


```lua
function
```
```lua function string.byte(s: string, i?: number, j?: number)
  -> number
  2. any ```
---
Returns the internal numeric codes of the characters `s[i], s[i+1], ..., s[j]`.
[View documents](http://www.lua.org/manual/5.1/manual.html#pdf-string.byte)
